package com.marketstatistics;

import android.content.Context;
import android.util.Log;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteDatabase;
import android.database.SQLException;
import android.database.DatabaseUtils;
import android.content.ContentValues;
import android.database.Cursor;
import java.util.List;
import java.util.ArrayList;

public class DBAdapter
{

    /******* if debug is set true then it will show all Logcat message ***/
	public static final boolean DEBUG = true;

	/********** Logcat TAG ************/
	public static final String LOG_TAG ="DBAdapter";

	/************ Table Fields************/
	public static final String KEY_ID ="_id";
	public static final String KEY_ITEM_NAME ="item_name";
	public static final String KEY_PRICE_MAX ="price_max";
	public static final String KEY_PRICE_MIN ="price_min";
	public static final String KEY_DATE ="date";
	public static final String KEY_INFO = "info";

	/************* Database Name************/
	public static final String DATABASE_NAME="DB_sqllite";

	/**** Database Version (Increase one if want to also upgrade your database)****/
	public static final int DATABASE_VERSION = 2;// started at 1

	/** Table names */
	public static final String USER_TABLE ="tbl_user";

	/**** Set all table with comma seperated
	 like USER_TABLE,ABC_TABLE ******/
	private static final String[] ALL_TABLES = { USER_TABLE };

	/** Create table syntax */
	private static final String USER_CREATE ="create table tbl_user( _id integer primary key autoincrement, item_name text not null, price_max text not null, price_min text not null, date text not null, info text not null);";

	/********* Used to open database in syncronized way *********/
	private static DataBaseHelper DBHelper = null;

	protected DBAdapter()
	{}

	/********** Initialize database*********/
	public static void init(Context context)
	{
		if (DBHelper == null)
		{
			if (DEBUG)Log.i("DBAdapter", context.toString());
			DBHelper = new DataBaseHelper(context);
		}
	}

	/********** Main Database creation INNER class ********/
	private static class DataBaseHelper extends SQLiteOpenHelper
	{
		public DataBaseHelper(Context context)
		{
			super(context, DATABASE_NAME, null, DATABASE_VERSION);
		}

		@Override
		public void onCreate(SQLiteDatabase db)
		{
			if (DEBUG)Log.i(LOG_TAG, "new create");
			try
			{
				db.execSQL(USER_CREATE);
			}
			catch (Exception exception)
			{
				if (DEBUG)Log.i(LOG_TAG, "Exception onCreate() exception");
			}
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion)
		{
			if (DEBUG)Log.w(LOG_TAG, "Upgrading database from version" + oldVersion + "to" + newVersion + "...");
			for (String table : ALL_TABLES)
			{
				db.execSQL("DROP TABLE IF EXISTS " + table);
			}
			onCreate(db);
		}
	}// Inner class closed

	/***** Open database for insert,update,delete in syncronized manner ****/
	private static synchronized SQLiteDatabase open() throws SQLException
	{
		return DBHelper.getWritableDatabase();
	}

	/************* General functions*************/

	/*********** Escape string for single quotes (Insert,Update) ********/
	private static String sqlEscapeString(String aString)
	{
		String aReturn ="";
		if (null != aString)
		{
			//aReturn = aString.replace(", );
			aReturn = DatabaseUtils.sqlEscapeString(aString);

			// Remove the enclosing single quotes ...
			aReturn = aReturn.substring(1, aReturn.length() - 1);
		}
		return aReturn;
	}

	/********** UnEscape string for single quotes (show data) ************/
	private static String sqlUnEscapeString(String aString)
	{
		String aReturn = "";
		if (null != aString)
		{
			aReturn = aString.replace(aString , "");
		}
		return aReturn;
	}

	/********* User data functons*********/
	public static void addUserData(UserData uData)
	{
		// Open database for Read / Write
		final SQLiteDatabase db = open();
		String item = sqlEscapeString(uData.getItemName());
		String max = sqlEscapeString(uData.getPriceMax());
		String min = sqlEscapeString(uData.getPriceMin());
		String date = sqlEscapeString(uData.getDate());
		String info = sqlEscapeString(uData.getInfo());
		ContentValues cVal = new ContentValues();
		cVal.put(KEY_ITEM_NAME, item);
		cVal.put(KEY_PRICE_MAX, max);
		cVal.put(KEY_PRICE_MIN, min);
		cVal.put(KEY_DATE, date);
		cVal.put(KEY_INFO, info);

		// Insert user values in database
		db.insert(USER_TABLE, null, cVal);
		db.close();// Closing database connection
	}

	// Updating single data
	public static int updateUserData(UserData data)
	{
		final SQLiteDatabase db = open();
		ContentValues values = new ContentValues();
		values.put(KEY_ITEM_NAME, data.getItemName());
		values.put(KEY_PRICE_MAX, data.getPriceMax());
		values.put(KEY_PRICE_MIN, data.getPriceMin());
		values.put(KEY_DATE, data.getDate());
		values.put(KEY_INFO, data.getInfo());

		// updating row
		return db.update(USER_TABLE, values, KEY_ID + " = ?", new String[] { String.valueOf(data.getID())});
	}

	// Getting single contact
	public static UserData getUserData(long mRowId)
	{
		// Open database for Read / Write
		final SQLiteDatabase db = open();
		Cursor cursor = db.query(USER_TABLE, new String[] { KEY_ID, KEY_ITEM_NAME, KEY_PRICE_MAX, KEY_PRICE_MIN, KEY_DATE }, KEY_ID + "=?", new String[] { String.valueOf(mRowId) }, null, null, null, null);
		if (cursor != null)cursor.moveToFirst();
		UserData data = new UserData(Integer.parseInt(cursor.getString(0)), cursor.getString(1), cursor.getString(2), cursor.getString(3), cursor.getString(4), cursor.getString(5));

		// return user data
		return data;
	}

	// Getting All User data
	public static List<UserData> getAllUserData()
	{
		List<UserData> contactList = new ArrayList<UserData>();

		// Select All Query
		String selectQuery ="SELECT  * FROM " + USER_TABLE;

		// Open database for Read / Write
		final SQLiteDatabase db = open();
		Cursor cursor = db.rawQuery(selectQuery, null);

		// looping through all rows and adding to list
		if (cursor.moveToFirst())
		{
			do
			{
				UserData data = new UserData();
				data.setID(Integer.parseInt(cursor.getString(0)));
				data.setItemName(cursor.getString(1));
				data.setPriceMax(cursor.getString(2));
				data.setPriceMin(cursor.getString(3));
				data.setDate(cursor.getString(4));
				data.setInfo(cursor.getString(5));

				// Adding contact to list
				contactList.add(data);
			}
			while(cursor.moveToNext());
		}
		// return user list
		return contactList;
	}
	
	public static Cursor fetchUserData(long rowId) throws SQLException
	{
		SQLiteDatabase db = open();
		Cursor mCursor = db.query(true, USER_TABLE, new String[] { KEY_ID, KEY_ITEM_NAME, KEY_PRICE_MAX, KEY_PRICE_MIN, KEY_DATE, KEY_INFO }, KEY_ID + "=" + rowId, null, null, null, null, null);

		if (mCursor != null)
		{
			mCursor.moveToFirst();
		}
		return mCursor;
	}

	public static Cursor fetchAllUserData()
	{
		SQLiteDatabase db = open();
		return db.query(USER_TABLE, new String[] { KEY_ID, KEY_ITEM_NAME, KEY_PRICE_MAX, KEY_PRICE_MIN, KEY_DATE, KEY_INFO }, null, null, null, null, null);
	}
	
	//fetch a list under given search title
	public static Cursor fetchAllDataFromGivenItem(String item)
	{
		SQLiteDatabase db = open();
		return db.query(USER_TABLE, new String[] { KEY_ID, KEY_ITEM_NAME, KEY_PRICE_MAX, KEY_PRICE_MIN, KEY_DATE, KEY_INFO }, KEY_ITEM_NAME + "=?", new String[] {String.valueOf(item)}, null, null, null);
	}

	public static List<UserData> fetchAllDetailedDataFromGivenItem(String item)
	{
		List<UserData> mList = new ArrayList<UserData>();

		// Select All Query
		String selectQuery ="SELECT  * FROM " + USER_TABLE + " WHERE " + KEY_ITEM_NAME + " LIKE '" + item + "' ";

		// Open database for Read / Write
		final SQLiteDatabase db = open();
		Cursor cursor = db.rawQuery(selectQuery, null);

		// looping through all rows and adding to list
		if (cursor.moveToFirst())
		{
			do
			{
				UserData data = new UserData();
				data.setID(Integer.parseInt(cursor.getString(0)));
				data.setItemName(cursor.getString(1));
				data.setPriceMax(cursor.getString(2));
				data.setPriceMin(cursor.getString(3));
				data.setDate(cursor.getString(4));
				data.setInfo(cursor.getString(5));

				// Adding contact to list
				mList.add(data);
			}
			while(cursor.moveToNext());
		}
		// return user list
		return mList;
	}
	
	public static Cursor fetchAllDetailedDataFromGivenItem2(String item)
	{
		// Select All Query
		String selectQuery ="SELECT  * FROM " + USER_TABLE + " WHERE " + KEY_ITEM_NAME + " LIKE '" + item + "' ";

		// Open database for Read / Write
		SQLiteDatabase db = open();
		return db.rawQuery(selectQuery, null);
	}
	
	// Deleting single contact
	public static void deleteUserData(UserData data)
	{
		final SQLiteDatabase db = open();
		db.delete(USER_TABLE, KEY_ID + " = ?", new String[] { String.valueOf(data.getID())});
		db.close();
	}

	public static boolean deleteUD(long rowId)
	{
		SQLiteDatabase db = open();
		return db.delete(USER_TABLE, KEY_ID + "=" + rowId, null) > 0;
	}

	// Getting dataCount
	public static int getUserDataCount()
	{
		final SQLiteDatabase db = open();
		String countQuery ="SELECT  * FROM " + USER_TABLE;
		Cursor cursor = db.rawQuery(countQuery, null);
		cursor.close();
		// return count
		return cursor.getCount();
	}

	public static boolean deleteAll()
	{
		SQLiteDatabase db = open();
		//String selectQuery = "DELETE FROM " + USER_TABLE ;
		//db.rawQuery(selectQuery, null);
		db.delete(USER_TABLE, null, null);

		// looping through all rows and adding to list
		/*if (cursor.moveToFirst())
		{
			do
			{
				int id = Integer.parseInt(cursor.getString(0));
				db.delete(USER_TABLE, KEY_ID + "=" + id, null);
			}
			while(cursor.moveToNext());
		}*/
		return true;
	}
	
	public static boolean deleteItemList(String item)
	{
		SQLiteDatabase db = open();
		return db.delete(USER_TABLE, KEY_ITEM_NAME + "= ?", new String[] {item}) > 0;
	}

	public static Cursor getAllItemNames()
	{
		SQLiteDatabase db = open();
		return db.query(USER_TABLE, new String[] { KEY_ID, KEY_ITEM_NAME, KEY_PRICE_MAX, KEY_PRICE_MIN, KEY_DATE, KEY_INFO }, null, null, KEY_ITEM_NAME, null, null);
	}
}// CLASS CLOSED
	
